/*! tailwindcss v4.0.12 | MIT License | https://tailwindcss.com */
.absolute {
  position: absolute;
}
.fixed {
  position: fixed;
}
.relative {
  position: relative;
}
.z-0 {
  z-index: 0;
}
.z-10 {
  z-index: 10;
}
.z-20 {
  z-index: 20;
}
.col-span-2 {
  grid-column: span 2 / span 2;
}
.col-span-3 {
  grid-column: span 3 / span 3;
}
.col-span-8 {
  grid-column: span 8 / span 8;
}
.col-span-11 {
  grid-column: span 11 / span 11;
}
.col-start-3 {
  grid-column-start: 3;
}
.container {
  width: 100%;
}
.mx-auto {
  margin-inline: auto;
}
.mt-\[-200px\] {
  margin-top: -200px;
}
.mt-\[calc\(140px\+2\.5rem\)\] {
  margin-top: calc(140px + 2.5rem);
}
.mt-auto {
  margin-top: auto;
}
.block {
  display: block;
}
.contents {
  display: contents;
}
.flex {
  display: flex;
}
.grid {
  display: grid;
}
.table {
  display: table;
}
.aspect-square {
  aspect-ratio: 1 / 1;
}
.h-\[60px\] {
  height: 60px;
}
.h-\[100px\] {
  height: 100px;
}
.h-\[630px\] {
  height: 630px;
}
.min-h-\[300px\] {
  min-height: 300px;
}
.min-h-screen {
  min-height: 100vh;
}
.w-\[60px\] {
  width: 60px;
}
.w-\[100px\] {
  width: 100px;
}
.w-\[200px\] {
  width: 200px;
}
.w-\[565px\] {
  width: 565px;
}
.w-\[600px\] {
  width: 600px;
}
.w-full {
  width: 100%;
}
.max-w-\[220px\] {
  max-width: 220px;
}
.max-w-\[565px\] {
  max-width: 565px;
}
.max-w-\[600px\] {
  max-width: 600px;
}
.max-w-\[1400px\] {
  max-width: 1400px;
}
.flex-shrink-0 {
  flex-shrink: 0;
}
.flex-grow-0 {
  flex-grow: 0;
}
.transform {
  transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
}
.cursor-pointer {
  cursor: pointer;
}
.resize {
  resize: both;
}
.grid-cols-3 {
  grid-template-columns: repeat(3, minmax(0, 1fr));
}
.grid-cols-12 {
  grid-template-columns: repeat(12, minmax(0, 1fr));
}
.grid-cols-14 {
  grid-template-columns: repeat(14, minmax(0, 1fr));
}
.grid-cols-\[200px_1fr\] {
  grid-template-columns: 200px 1fr;
}
.grid-cols-\[minmax\(565px\,1fr\)_minmax\(220px\,1fr\)_minmax\(600px\,1fr\)\] {
  grid-template-columns: minmax(565px,1fr) minmax(220px,1fr) minmax(600px,1fr);
}
.grid-rows-\[auto_auto_1fr\] {
  grid-template-rows: auto auto 1fr;
}
.flex-col {
  flex-direction: column;
}
.flex-wrap {
  flex-wrap: wrap;
}
.items-center {
  align-items: center;
}
.items-start {
  align-items: flex-start;
}
.justify-between {
  justify-content: space-between;
}
.justify-center {
  justify-content: center;
}
.justify-start {
  justify-content: flex-start;
}
.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.overflow-hidden {
  overflow: hidden;
}
.overflow-visible {
  overflow: visible;
}
.overflow-y-auto {
  overflow-y: auto;
}
.rounded-full {
  border-radius: calc(infinity * 1px);
}
.border {
  border-style: var(--tw-border-style);
  border-width: 1px;
}
.border-b {
  border-bottom-style: var(--tw-border-style);
  border-bottom-width: 1px;
}
.bg-\[\#1a202c\] {
  background-color: #1a202c;
}
.bg-\[\#333\] {
  background-color: #333;
}
.bg-\[\#434341\] {
  background-color: #434341;
}
.bg-\[\#f1eee7\] {
  background-color: #f1eee7;
}
.object-cover {
  object-fit: cover;
}
.pb-\[7rem\] {
  padding-bottom: 7rem;
}
.pb-\[75\.33\%\] {
  padding-bottom: 75.33%;
}
.text-center {
  text-align: center;
}
.break-words {
  overflow-wrap: break-word;
}
.text-\[\#b08d49\] {
  color: #b08d49;
}
.text-\[\#f0e6d2\] {
  color: #f0e6d2;
}
.lowercase {
  text-transform: lowercase;
}
.lowercase\! {
  text-transform: lowercase !important;
}
.outline {
  outline-style: var(--tw-outline-style);
  outline-width: 1px;
}
.transition {
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.hover\:underline {
  &:hover {
    @media (hover: hover) {
      text-decoration-line: underline;
    }
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
  initial-value: rotateX(0);
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
  initial-value: rotateY(0);
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
  initial-value: rotateZ(0);
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
  initial-value: skewX(0);
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
  initial-value: skewY(0);
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
